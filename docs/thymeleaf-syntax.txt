${...}
    변수 표현식은 모델에서 제공된 데이터를 참조하는 데 사용됨
    <span th:text="${user.name}">사용자 이름</span>

*{...}
    선택 변수 표현식은 현재 선택된 객체의 속성을 참조하는 데 사용됨
    일반적으로 th:object와 함께 사용됨 
    <form th:object="${user}">
        <input type="text" th:field="*{name}" />
    </form>

#{...}
    메시지 표현식은 국제화를 위한 메시지를 참조하는 데 사용됨 
    <span th:text="#{welcome.message}">환영 메시지</span>

<!--/* ... */-->
    서버 사이드 주석으로, 클라이언트에 전송되지 않음 
    <!--/* 이 주석은 클라이언트에 전송되지 않음 */-->

${variable}? 'default'
    변수가 null 또는 비어있는 경우 기본값을 제공
    <span th:text="${user.name}?: 'Anonymous'">사용자 이름</span>

(if) ? (then) : (else)
    조건 연산자를 사용하여 조건에 따라 다른 값을 출력
    <span th:text="${user.loggedIn} ? '로그아웃' : '로그인'">로그인 상태</span>

th:each
    컬렉션을 반복 처리하는 데 사용
    <ul><li th:each="item : ${items}" th:text="${item.name}"></li></ul>

th:text
    요소의 텍스트 콘텐츠를 설정
    <span th:text="${user.name}">기본 텍스트</span>

th:if / th:unless
    조건부 렌더링을 수행
    <div th:if="${user.loggedIn}">로그인 상태</div>
    <div th:unless="${user.loggedIn}">로그인 필요</div>

th:with
    변수를 선언하고 사용할 수 있게 함 
    <div th:with="total=${price * quantity}">
        총 가격: <span th:text="${total}"></span>
    </div>

th:attr
    여러 속성을 한 번에 설정
    <a th:attr="href=@{/path/{id}(id=${item.id})}, title=${item.name}">링크</a>

th:href
    href 속성을 설정
    <a th:href="@{/path/{id}(id=${item.id})}">링크</a>

th:src
    src 속성을 설정
    <img th:src="@{/images/sample.jpg}" alt="샘플 이미지">

th:remove
    요소를 조건에 따라 제거
    <div th:remove="all">이 요소는 제거됩니다</div>

th:fragment
    프래그먼트를 정의
    <div th:fragment="header">
        <h1>헤더</h1>
    </div>

th:switch
    스위치 케이스 문을 사용하여 조건부 렌더링을 수행
    <div th:switch="${user.role}">
        <p th:case="'ADMIN'">관리자</p>
        <p th:case="'USER'">일반 사용자</p>
        <p th:case="*">알 수 없는 역할</p>
    </div>

th:inline
    텍스트 내에서 Thymeleaf 표현식을 사용할 수 있음 
    <p th:inline="text">안녕하세요, [[${user.name}]]님!</p>

th:attrappend
    기존 속성 값에 값을 추가
    <div th:attrappend="class=${' active'}"></div>

th:classappend
    class 속성 값에 값을 추가
    <div th:classappend="${'hidden'}"></div>

th:insert
    프래그먼트를 삽입
    새로운 요소를 생성하지 않고 기존 요소의 자식으로 삽입
    <div th:insert="~{fragments/header :: header}"></div>

th:block
    렌더링되지 않는 논리적 컨테이너로, 여러 요소를 그룹화하는 데 사용
    <th:block th:if="${user.loggedIn}">
        <span>환영합니다,</span>
        <span th:text="${user.name}">사용자</span>
    </th:block>

